{"/":{"title":"Lucas Myers","content":"\nüëã Welcome to my website! \nIt's here to showcase my professional work, and also help motivate me to take better notes.\nIdeally it will eventually follow a [Zettelkasten](https://www.wikiwand.com/en/Zettelkasten) type of organization, but for now you can find most of the main sections below.\n\n- üñ•Ô∏è [Projects](notes/projects.md): \n    Mostly PhD work, but sometimes hobby projects. Largely code, sometimes scrutable.\n\n- üìì [Notes](notes/notes.md)\n    Personal notes that I write to remember (typically technical) details of things I'm working on. Mostly scraps.\n\n- üì∞ [Posts](notes/posts.md)\n    More carefully written-out documents, either for things that I would *really* like to remember or that might be helpful for others.\n\n- ‚ùî [About me](notes/about_me.md)\n\n","lastmodified":"2024-04-05T18:47:49.250355632Z","tags":[]},"/notes/about_me":{"title":"About me","content":"\nI am currently a PhD candidate in the physics department at the University of Minnesota studying soft matter.\nI tend to get obsessive about technical tasks, especially when they make promises of making other (menial) work easier or more enjoyable.\nThese tasks usually take many hours and are not at all worth it to complete.\n\nI am a computational theorist, and so I code by trade.\nI also really like coding, and try hard to write code that's understandable in cases where external parameters (e.g. deadlines) make that a possibility.\nProficient in C++ and Python, learning Rust and Lua (although there's not much Lua to learn), and learning just enough Scheme to script in Lilypond.\n\nI play music when I have time, and am currently on a crusade to learn [Reaper](https://www.reaper.fm/) and [Lilypond](https://lilypond.org/) by transcribing tunes I like.\nTrying hard to brew kombucha with as little effort as possible, because I need a fun little drink every day and I can't be spending $3 per bottle on a grad student salary.\nBig fan of bikes, especially crappy bikes that I can replace all of the parts on with cheap bits from the junk drawer at the bike shop.\n","lastmodified":"2024-04-05T18:47:49.250355632Z","tags":[]},"/notes/c++":{"title":"C++","content":"\n# Passing Lambda functions by reference\n\n[See here](https://stackoverflow.com/a/15984649/7736506) for a clear explanation of what's going on with the `auto` keyword.\nApparently C++ Lambda functions are just syntactic sugar for callable objects (classes which implement the `operator()` function).\nThe captures are just the member variables of the class, and the method body is just implementing the `operator()` method.\nThe issue that I was running into was trying to write a function with signature:\n```cpp\nvoid calls_lambda(std::function\u003cvoid()\u003e \u0026lambda_func)\n```\nFor this, I tried to create a Lambda function in the following way:\n```cpp\nauto lambda_func = []() { /* do some stuff */ };\n```\nHowever, as explained in [the stack overflow post](https://stackoverflow.com/a/15984649/7736506), this is not of type `std::function`, and so the compiler does an implicit conversion which, in turn, returns a *temporary*. \nI guess a temporary is [always an rvalue](https://stackoverflow.com/a/15131683/7736506) which means you cannot create a non-const lvalue reference to it.\nYou can pass it by value or by const lvalue reference.\n\nI wanted to give users of `calls_lambda` the ability to pass in a big `std::function` object, and also be able to change it within `calls_lambda`.\nThe solution is just to create the lambda as a `std::function` explicitly:\n```cpp\nstd::function\u003cvoid()\u003e lambda_func = []() { /* do some stuff */ };\n```\n","lastmodified":"2024-04-05T18:47:49.250355632Z","tags":[]},"/notes/doxygen":{"title":"Doxygen","content":"\n# Introduction\n\n[Doxygen](https://www.doxygen.nl/index.html) is a command-line utility which goes through code-bases and documents code based on (a) the code itself and (b) special comments that developers can make to include extra information.\nThe output is a set of html files which forms a website, or LaTex which can then be used to generate a PDF manual.\nTypically these create a list of relevant code objects like namespaces, classes, and files.\nAdditionally, there is a main page which functions as the opening page of the site, written in html with a `.dox` extension, or written in regular mardkwon.\nAlso users may specify pages in the same manner as the main page which are just other documentation pages on the site.\n","lastmodified":"2024-04-05T18:47:49.250355632Z","tags":[]},"/notes/git":{"title":"Git","content":"\n# Tutorials\n\n- [Really slick space-themed](https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud)\n- [Learn git branching](https://learngitbranching.js.org/?locale=en_US) is a cool Javascript-based tutorial which visually explains some intermediate aspects of git.\n\n# Rebasing\n\nIn its most basic form `git rebase \u003cdestination\u003e` takes the commit where `HEAD` is located, finds the closest common ancestor with `\u003cdestination\u003e`, takes all the commits after that ancestor which lead up to `HEAD` (including `HEAD` itself!) and attaches them to `\u003cdestination\u003e`.\nFor example, consider the following series of commits.\n```mermaid\ngitGraph:\n    commit id: \"A\"\n    branch develop\n    commit id: \"B\"\n    checkout main\n    commit id: \"C\"\n```\nSomeone has branched to `develop` and created a new feature in commit `B`, but someone on `main` has (say) fixed a bug in commit `C`.\nTypically one would merge, in which case the resulting graph looks like:\n```mermaid\ngitGraph:\n    commit id: \"A\"\n    branch develop\n    commit id: \"B\"\n    checkout main\n    commit id: \"C\"\n    merge develop id: \"B/C\"\n```\nIn this case we have to specify another commit `B/C`which merges the two.\nThis is fine, but it makes the graph nonlinear and also adds a superfluous commit.\nIn the case where there's no conflicts, one may instead use rebase to do the following:\n```mermaid\n%%{ init: { \n    'themeVariables': { \n        'gitBranchLabel1': '#000000',\n        'git1': '#cccccc'\n    }\n    } }%%\ngitGraph:\n    commit id: \"A\"\n    branch develop\n    commit id: \"B\"\n    checkout main\n    commit id: \"C\"\n    commit id: \"B'\"\n```\nHere  the develop branch is grayed out because we no longer care about it -- the changes in commit `B` have essentially been grafted onto `C` via commit `B'`. \n\n# Creating a documentation branch\n\nFirst have to checkout a branch which has basically no content.\nTo see the first commits:\n``` bash\ngit log --reverse\n```\nThe output should look something like:\n```\ncommit f08827d194c9b25f1f6502148cc4797753798207\nAuthor: Lucas Myers \u003clucasmyers97@gmail.com\u003e\nDate:   Tue Dec 28 12:42:56 2021 -0600\n```\nYou checkout that commit (only need the first few characters) in order to get close to a blank slate:\n``` bash\ngit checkout \nf08827d\n```\nFinally, \n","lastmodified":"2024-04-05T18:47:49.250355632Z","tags":[]},"/notes/jacktrip":{"title":"JackTrip","content":"\n# Introduction\n\nPart of the issue with getting Jacktrip set up is that there are lots of resources floating around, many of which are extremely outdated.\nAdditionally, there are several pieces of software which are built upon one another and go by similar names (see \u003ca href=\"#jack-vs-jacktrip\"\u003eJACK vs. JackTrip\u003c/a\u003e).\nTo try to grok this I'll lay out some available resources, then try to explain the relevant info about how these pieces of software interact, and also get JackTrip set up so that I can play music with my friends.\n\n# JACK vs. JackTrip\n\nSeveral pieces of software invovled in this have similar names.\nBelow I'll try to sort out what each of them do:\n\n- [JACK Audio Connection Kit](https://www.wikiwand.com/en/JACK_Audio_Connection_Kit) (a recursive acronym) is a [sound server API](https://www.wikiwand.com/en/Sound_server), and pair of [daemon](https://www.wikiwand.com/en/Daemon_(computing)) implementations to provide low-latency connections for audio.\nAs I understand it, it is the interface between applications (e.g. Firefox, Reaper), and the program which provides the sound hardware driver ([AlSA](https://www.wikiwand.com/en/ALSA_(Linux)) in the case of Linux).\nIt is in charge of scheduling so that latency is extremely low -- apparently the default audio daemon, [Pulse Audio](https://www.wikiwand.com/en/PulseAudio) has too high a latency (although it serves a somewhat different purpose as a program).\nNote that this is old software, originally being released in 2002.\nIt has been pretty regularly updated, with the newest release being in 2022.\n\n- [JackTrip](https://github.com/jacktrip/jacktrip) is an opensource software that builds on JACK to network music peformance over the internet. \nThis is also somewhat old software -- one of the documentation sites that I found is dated 2009.\nI think they are now calling this *JackTrip Core*.\n\n- [JackTrip App](https://www.jacktrip.com/jacktrip-app) is (I think) a sleek GUI app which lets you use the JackTrip program. I'm not actually sure if they're different, but the [fancy website](https://www.jacktrip.com/) seems to specifically call it that to make a distinction.\n\n- [JackTrip Virtual Studio](https://www.jacktrip.com/product) is (I think) the foundation's attempt to monetize the whole thing.\nIt's a cloud server which host's the connection between performers.\nI assume people using the JackTrip App must use the Virtual Studio to connect, but somehow it makes it easier for folks to get set up.\nPresumably this is due in some part to not having to host a session (where you have to set up port forwarding and all that), but also because it just makes it easier to connect.\n\nI am interested in using JACK and JackTrip, but not the app or the virtual studio -- I suspect those only work really well if you use the cloud service, and I don't want to pay money.\n\n# JACK1 vs. JACK2\n\n- In short, JACK2 is a rewrite in C++ which also offers multi-processor support.\n- [See here](https://github.com/jackaudio/jackaudio.github.com/wiki/Differences-between-jack1-and-jack2) on the JACK GitHub for more info.\n\n# Learning resources\n\n- The first thing that comes up on a search is the [JackTrip website](https://www.jacktrip.com/). \nWe don't want this.\nIf you scroll to the bottom, you find the JackTrip core.\n\n- [JackTrip core](https://jacktrip.github.io/jacktrip/) has an extremely brief documentation website on [GitHub Pages](https://pages.github.com/).\nIt appears to only be screenshots of the GUI corresponding to certain settings.\nIf you go to `About -\u003e Resources -\u003e CCRMA`, you find more detailed instructions, which I think are older.\n\n- The [CCRMA documentation](https://ccrma.stanford.edu/docs/common/IETF.html) is (I think) academic documentation from the center at Stanford.\nIt seems reasonably complete if you already sort of know what it's already talking about.\n\n- The [JACK Audio Connection Kit](https://jackaudio.org/) website gives more info on the underlying driver.\nThis has some important information for making it work with ALSA and getting it to play nice with PulseAudio.\n\n- Robert Edgar has an [extremely detailed guide](https://www.robertedgar.com/themencode-pdf-viewer-sc/?tnc_pvfw=ZmlsZT1odHRwczovL3d3dy5yb2JlcnRlZGdhci5jb20vQXJ0aWNsZXMvSkFDS1RSSVBfTUFDX0RPXzgtNC0yMDIwLXMucGRmJnNldHRpbmdzPTExMTExMDExMTExMTExMTExMDAmbGFuZz1lbi1VUw==#page=\u0026zoom=auto\u0026pagemode=none) on setting up JackTrip.\n\n# Installation on Linux\n\n### 1. Install JACK2:\n\nFor Debian-based distros, the following commands do this:\n```\nsudo apt update\nsudo apt install jackd2\n```\nYou can check that it works with:\n```\njackd --version\n```\nMine outputs:\n```\njackdmp version 1.9.12 tmpdir /dev/shm protocol 8\n```\n\n### 2. Test JACK2\n\nNote that you may have to suspend PulseAudio, as detailed [here](https://jackaudio.org/faq/pulseaudio_and_jack.html).\nFor me, that command looks like:\n```\npasuspender -- jackd -d alsa\n```\nTo test the audio:\n- Start `qjackctl`.\n- If it's not already started, start running JACK with the \"Start\" button. \n- Turn the volume all the way down\n- Click \"Connect\" and make a connection between a `capture` (microphone) and a `playback` (speaker) instance.\n- Snap gently into the microphone while slowly increasing the volume to see whether the snap comes through.\n- If it does, JACK is working properly.\n\n### 3. Install JackTrip\n\nThere's a [guide on the GitHub pages](https://jacktrip.github.io/jacktrip/Install/) which shows how to install:\n```\nsudo add-apt-repository ppa:umlaeute/jacktrip\nsudo apt update\nsudo apt install jacktrip\n```\nHowever, this version does not have GUI support, and so must be run from the commandline.\n\nInstead, one may download the binaries from the [GitHub Releases page](https://github.com/jacktrip/jacktrip/releases).\nThe Linux one comes with a README.md which gives simple terminal instructions for installation.\nAfter this, you should be able to run `jacktrip --version` from the commandline, or open the GUI with your application selector.\n\n# Notes from when I did this\n\n- The JACK website [recommends you suspend PulseAudio](https://jackaudio.org/faq/pulseaudio_and_jack.html), but the only difference is that PulseAudio syncs and sources show up in the JACK connection panel.\n    - To suspend PulseAudio I had to: `pasuspender -- jackd -d alsa`\n- I could not get my USB or wireless headphones to work for this.\nI had to switch to the standard aux headphones (which, I actually thought the input was broken on my computer, but apparently not).\n    - In both cases, they only showed `system` input and output ports with `capture_1`, `capture_2`, and `playback_1`, `playback_2` respectively.\n    - When I would connect a `capture` to a `playback`, in the case of USB or wireless headphones it would just record and play out on my laptop's inbuilt microphone and speaker.\n    - From the Ubuntu sound settings I could change which volume I was changing (e.g. built-in speaker or USB/bluetooth headphones). \n    Only built-in speaker volume changed how loud my snaps were.\n    - Connecting `capture` to `playback` with aux headphones plays through the headphones no matter what you do -- could not get it to switch between speaker and headphones when they were plugged into the aux jack.\n\n- The JackTrip executable from apt does not include GUI support, which is sort of annoying.\n    - To deal with this, I just downloaded the zip from GitHub and then followed the README.md to install. \n    - Works well, I can launch the GUI from the gnome app selector.\n\n# Port forwarding\n\nThe Xfinity app was not letting me view my port forwarding (it would just say \"an unexpected error has occured\").\nI found a fix [here](https://forums.xfinity.com/conversations/xfinity-app/unable-to-set-port-forwarding/645027d3b9339b2013e96c07) which reads as follows\n```\nOpen up the xfinity app and it should bring you to the overview page. On the top right, there is a chat icon, click it. It will bring you to the chat AI assist. In the chat window, type port forward. The AI will respond the a number of prompts, select network. Then another list of prompts will load, select open advanced options. Finally, the last set of prompts will appear, where here you can select port forwarding.\n```\nI guess the AI can bypass whatever the menu fails to do.\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/licensing":{"title":"Licensing","content":"\n## Introduction\n\nI am getting to a point where I will be releasing software so I should give my repos licenses, otherwise they [cannot be used](https://choosealicense.com/no-permission/) by other people. \nHowever, I am not a copyright lawyer and so I do not know anything about licenses.\nThe following are notes and resources about licenses, but also should not be taken as legal advice -- I am not responsible for anything you do with this information.\n\n## Resources\n\n- [A very quick introduction to licensing](https://choosealicense.com/)\n- [GNU licensing info](https://www.gnu.org/licenses/licenses.html)\n- [What is Copyleft?](https://www.gnu.org/licenses/copyleft.html)\n- [GNU how to choose a license](https://www.gnu.org/licenses/license-recommendations.en.html)\n- [Why upgrade to GPLv3?](https://www.gnu.org/licenses/rms-why-gplv3.en.html)\n\n## Some considerations when choosing a license\n\n- If you use something using GPL, you also need to release your work under GPL.\n- If you use something using LGPL then you only need to release modifications to the source. Otherwise you can close source it (and presumably release under a different license).\n\n## Questions I still have\n\n- How much do you have to change in order to use a different license?\n    - It appears that you need to have something called a [clean room implementation](https://www.wikiwand.com/en/Clean_room_design), at least for the GPL.\n    - I think for LGPL anything other than a clean room implementation is still a modification and must be released as open source. Not sure whether it is okay to relicense.\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/linux":{"title":"Linux","content":"\n# Sound driver\n\n## Getting headphone mic to work\n\nSee [reddit post](https://www.reddit.com/r/ManjaroLinux/comments/pivytl/realtek_alc255_codec_35mm_mic_not_working/) and corresponding [Arch linux wiki](https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture#Correctly_detect_microphone_plugged_in_a_4-pin_3.5mm_(TRRS)_jack).\nAlso on the Reddit page:\n```\nTested with Gigabyte Aero15 2017 (P65 Model), with ALC255 and set model to dell-headset-multi\n```\n\nSo, It's same codec. And I did the same steps like on ArchWiki:\n\n- cd /etc/modprobe.d/\n- sudo touch alsa-base.conf\n- sudo vim alsa-base.conf\n- options snd_hda_intel index=0 model=dell-headset-multi\n- sudo reboot now \n\nUPD:\n\n- Changed filename to /etc/modprobe.d/snd-hda-intel.conf\n\nand it's content:\n\n- options snd-hda-intel model=auto,dell-headset-multi \n\n## Figuring out soundcard\n\n[This post](https://net2.com/how-to-view-your-sound-card-information-using-the-terminal-in-ubuntu-18-04/) has some helpful commands (even though it's the wrong Ubuntu version).\nThis gives soundcards:\n```\ncat /proc/asound/cards\n```\nThis gives manufacturer details:\n```\nlspci -v | grep -i audio\n```\nThis gives a nice little interface:\n```\nalsamixer\n```\n\n## Modules and configuring ALSA\n\nThe resources I've seen typically modify the `/etc/modprobe.d/alsa-base.conf` file. \nIt seems that the `modprobe.d` folder [passes modules to `udev` which loads them with modprobe on boot](https://wiki.archlinux.org/title/Kernel_module#Using_files_in_/etc/modprobe.d/).\nThey can have any name, and options are set via:\n```\noptions module_name parameter_name=parameter_value\n```\nIn mine they (additionally) have a different set of syntax of:\n```\ninstall sound-slot-0 /sbin/modprobe snd-card-0\n```\nI guess this is a nice way to use the `modprobe` utility automatically at boot.\nThe `modprobe` utility loads and configures [kernel modules](https://sysprog21.github.io/lkmpg/) (see link for more details).\nSomehow loading and configuring the appropriate modules is the thing that will solve my soundcard problem.\n\n# SSH key generation\n\n[SSH (Secure Shell Protocol)](https://www.wikiwand.com/en/Secure_Shell) is a protocol by which one may communicate securely with another computer.\nTypically one connects through the terminal and may then operate the remote machine as if it were directly interfacing with the machine's terminal.\nGUI support may also be enabled so that one may interact with GUI programs on the remote machine.\nUsers may also transfer files to and from the remote machine via the `scp` command.\n\nThis works via a [public key cryptography scheme](https://www.wikiwand.com/en/Public-key_cryptography) whereby the user creates a public-private key pair, and distributes the public key to the remote machine.\nThe remote machine then uses the public key to encrypt data, and the local machine may then decrypt the data with the private key.\nA symmetrical process happens with sending data to the remote server.\nTypically a password is used to authenticate a user.\n\nTo avoid having to use a password, one must manually create a public-private key pair, and then upload the public key to the remote server.\nHere are the explicit steps:\n\n1. Create a public-private key pair:\n    ```{linenos=false} bash\n    ssh-keygen -t ed25519\n    ```\n    It will first prompt you to save it in some location.\n    On Linux, the default location is `~/.ssh/id_ed25519`. \n    If you already have a key there (likely) still save in the `~/.ssh/` directory, but give it a different name like `~/.ssh/some_key_name`.\n    It will also ask for a passphrase -- enter whatever secure passphrase you want here.\n\n2. Add the private key to your ssh-agent.\n    First start the ssh-agent.\n    ```{linenos=false} bash\n    $ eval \"$(ssh-agent -s)\"\n    \u003e Agent pid 59566\n    ```\n    Then add the private key:\n    ```{linenos=false}\n    ssh-add ~/.ssh/some_key_name\n    ```\n\n3. Upload the public key to the remote machine:\n    ```{linenos=false} bash\n    ssh-copy-id -i ~/.ssh/some_key_name.pub remote-user@remote-host\n    ```\nSee [this Stack Exchange answer](https://superuser.com/a/8110/1375974), and [this GitHub guide](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) were very helpful.\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/lua":{"title":"Lua","content":"\n## Installing Lua 5.1 (Neovim's version)\n\nHere is [a list of source versions](http://www.lua.org/ftp/).\nDownload and do the checksum.\nJust as a reminder, the checksum is done with:\n```bash\necho \"7f5bb9061eb3b9ba1e406a5aa68001a66cb82bac95748839dc02dd10048472c1 lua-5.1.tar.gz\" | sha256sum --check\n```\nShould output `Ok`.\nCan build this with:\n```bash\ntar -zxf lua-5.1.tar.gz\ncd lua-5.1/\nmake linux\nsudo checkinstall\n```\nThis will make an installation which may be uninstalled easily with:\n```bash\ndpkg -r lua\n```\n\n## Installing Luarocks for Lua 5.1\n\n[Source is available here](https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix).\nCan build with:\n```bash\ntar -zxf luarocks-3.9.2.tar.gz\ncd luarocks-3.9.2/\n./configure --lua-version=5.1\nmake\nsudo checkinstall\n```\nMay be easily uninstalled with:\n```bash\ndpkg -r luarocks\n```\n\n## Installing `magick`\n\nTo use image processing in Neovim, you need to install the `magick` Luarocks image manipulation package.\nVhyrro has some words about that [here](https://github.com/vhyrro/hologram.nvim).\nIn short, to install with luarocks:\n```bash\nluarocks --local --lua-version=5.1 install magick\n```\nAnd then to make available to Neovim, you must put the following in your init file:\n```lua\npackage.path = package.path .. \";~/.luarocks.share/lua/5.1/?/init.lua;\"\n```\nNote that you also need the development library of ImageMagick.\nThis can be installed with:\n```bash\nsudo apt install libmagickwand-dev\n```\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/neovim":{"title":"Neovim","content":"\n\n- [Configuration files](notes/neovim_configuration)\n- Foward and inverse latex search with Lua (coming soon, see [this gist](https://gist.github.com/lucasmyers97/1ee0dfca63eb17e4c3d851b32e17a61a) for an example config)\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/neovim_configuration":{"title":"Neovim configuration","content":"\n# Default neovim settings\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/notes":{"title":"Notes","content":"\n- [Todo](notes/todo.md)\n- [Neovim](notes/neovim.md)\n- [C++](notes/c++.md)\n- [Python](notes/python.md)\n- [Paraview](notes/paraview.md)\n- [Linux](notes/linux.md)\n- [Git](notes/git.md)\n- [Website](notes/website.md)\n- [Lua](notes/lua.md)\n- Lilypond\n- Reaper (DAW)\n- [jacktrip](notes/jacktrip.md)\n- [Licensing](notes/licensing.md)\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/paraview":{"title":"Paraview","content":"\n# Programmable filter\n\n[See here for documentation](https://docs.paraview.org/en/latest/ReferenceManual/pythonProgrammableFilter.html)\n\n## Basic input/output\n\n```python\nvector_data = inputs[0].PointData['vector_data']\nscalar_data = inputs[0].PointData['scalar_data']\n\nprint(vector_data.shape)\nprint(scalar_data.shape)\n\noutput.PointData.append(scalar_data / 2.0, 'scalar_data_half')\n```\nOutput would give:\n```console\n(269472, 3)\n(269472,)\n```\n\n## Using numpy\n\nThere's a canonical way to transform between numpy arrays and vtk data.\nAdditionally, there is an algorithms package which allows one to make use of the extra structure in the vtk data (as opposed to just numpy arrays).\nThis is helpful for things like taking gradients of data.\n\n[See here for documentation](https://docs.paraview.org/en/latest/ReferenceManual/vtkNumPyIntegration.html)\n\n# Custom filters\n\nThere are often times when one wants to apply a series of filters to many sets of data.\nSetting up those filters for each bit of data is often tedious and tortuous, especially when there are settings that can remain the same for every single dataset.\nThis is doubly true when having to type out (or copy-paste) a script for a programmable filter.\nThe Paraview utility that handles this is the Custom filter utility.\nTo use this, select some number of filters (`CTRL-\u003cleft click\u003e` on a few), then right click and select `Create Custom Filter`. \nVia this one may specify inputs, outputs, and also which settings to set and which to allow a user to set.\nAfter they are created, custom filters are available just like any other filter.\n\n[See here for documentation](https://www.paraview.org/Wiki/ParaView/Custom_Filters)\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/posts":{"title":"Posts","content":"\n# [Fourier series widget](notes/fourier_series_widget.md)\n\nI wrote a widget which allows one to interactively watch a partial Fourier sum converge.\nIn undergrad I was always sort of dubious that all functions (in $L_2$ space) could be represented by Fourier series, so I'm hoping this makes it a little bit more palatable. \nI still need to publish the widget (or one I rewrote in Rust) to Github pages, so the link is currently defunct.\n\n# [Introduction to liquid crystals](notes/introduction_to_liquid_crystals.md)\n\nThis was an attempt to write a talk out as a post to try to curb some procrastination (really had some writer's block making the slides).\nIt was pretty silly, and I still need to put in the figures (right now it's all placeholders), so the link is currently defunct.\n\n# [Bachmann-Landau notation widget](https://lucasmyers97.github.io/bachmann-landau/)\n\nI started reading [Calculus and Analysis in Euclidean Space](https://link.springer.com/book/10.1007/978-3-319-49314-5), one of the really great [Undergraduate Texts in Mathematics](https://www.springer.com/series/666) to try to skirt around reading [Calculus on Manifolds](https://www.wikiwand.com/en/Calculus_on_Manifolds_(book)) -- it was just pretty terse and didn't lay out a lot of the intuition.\nHowever, C\u0026A in E starts off with [Bachmann-Landau notation](https://www.wikiwand.com/en/Big_O_notation) to simplify the presentation.\nI've thought some about trying to make more visual proofs of some of the theorems in the book (e.g. inverse function theorem, implicit function theorem), but I'm a little technically limited. \nAs a first step, I started writing a widget in Typescript which allows the user to enter in an expression in $x$ and $y$, and then plots the image of a circle of radius $r$ as well as another circle.\nThe user can then zoom in and also change the input circle radius.\nThe idea is that one can graphically investigate the convergence properties of $2D$ functions to get a better intuition for the different asymptotic behaviors.\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/projects":{"title":"Projects","content":"\n# [Hydrodynamics of anisotropically elastic nematic liquid crystals](https://github.com/lucasmyers97/maier-saupe-lc-hydrodynamics)\n\n\u003cimg align=\"right\" src=\"/notes/images/projects/liquid_crystal_topological_defects.png\" width=200em alt=\"nematic liquid crystal topological defects\"\u003e\n\nNematic liquid crystals are materials with rod-like particles which tend to align on macroscopic scales.\nHowever, spatially these particles are randomly distributed letting the material flow like a liquid, hence the name.\nWhen quickly frozen, they spontaneously create *topological defects* (see right) which attract or repel in the course of the material relaxing to thermodynamic equilibrium.\nWe study how these defects interact when including that the material can flow, and also in materials which prefer different ways of distorting over others.\n[Image source](http://dx.doi.org/10.1080/21680396.2013.878672)\n\n# [Phase-field crystals with elasticity](https://github.com/lucasmyers97/phase-field-crystals)\n\n\u003cimg align=\"left\" src=\"/notes/images/projects/crystalline_defects.jpg\" width=200em alt=\"crystalline topological defects\"\u003e\n\nCrystalline materials consist of atoms arranged in a lattice.\nThe interatomic forces behave somewhat like springs linking them, and so any compressive forces on the material as a whole result in elastic (spring-like) responses.\nHowever, there are often *topological defects* (left) which shift in position when external forces act on the material.\nThis causes the material to exhibit *plasticity*, whereby it can be permanently deformed.\nWe seek to create a model which combines these two characteristics by representing the lattice as a phase field, and imposing elasticity by simultaneously solving elastic equations from continuum mechanics.\n[Image source](https://saylordotorg.github.io/text_general-chemistry-principles-patterns-and-applications-v1.0/section_16/d91b436089f90f5e6df5964f29c9e04b.jpg)\n\n\n# [Lebedev quadrature in C++](https://github.com/lucasmyers97/lebedev-quadrature)\n\n\u003cimg align=\"right\" src=\"/notes/images/projects/lebedev_grid.png\" width=200em alt=\"crystalline topological defects\"\u003e\n\nIn several scientific applications, including quantum electronic structure calculations in chemistry and (in our case) calculating potentials associated with orientation-describing order parameters, one must integrate along the surface of a sphere.\nLebedev quadrature is a way to do this numerically which exactly integrates polynomials up to a given order on the sphere, and does so by assigning weights to sets of points that are invariant under the octahedral symmetry group.\nI needed this to calculate the [Ball-Majumdar singular potential](doi.org/11.1080/15421401003795555) and existing implementations had manual memory management (not ideal).\nI wrote this to try to make a cleaner, more readable implementation which also includes more documentation and is easier to include in other projects via conventional methods.\n[Image source](http://dx.doi.org/10.1016/j.jcp.2018.06.013)\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/python":{"title":"Python","content":"\n# List of arguments with `argparse`\n\nUse [`nargs`](https://docs.python.org/3/library/argparse.html#nargs) option. \nSet to `'+'` for more than one, or `'*'` for more than zero.\nThen it might look like:\n```python\nparser.add_argument('-t', dest='table', help='', nargs='+')\n```\nand the commandline might look like\n```bash\npython myscript.py -t [0.1, 3.2, 8.1]\n```\nFrom [answer here](https://stackoverflow.com/a/23490179/7736506).\n\n# Formatting strings\n\nQuick and dirty is that the strings should take the following form:\n```\nreplacement_field ::=  \"{\" [field_name] [\"!\" conversion] [\":\" format_spec] \"}\"\nfield_name        ::=  arg_name (\".\" attribute_name | \"[\" element_index \"]\")*\narg_name          ::=  [identifier | digit+]\nattribute_name    ::=  identifier\nelement_index     ::=  digit+ | index_string\nindex_string      ::=  \u003cany source character except \"]\"\u003e +\nconversion        ::=  \"r\" | \"s\" | \"a\"\nformat_spec       ::=  \u003cdescribed in the next section\u003e\n```\nThe format spec describes how something ought to be printed, is preceded by a `:`, the options are given as follows:\n```\nformat_spec     ::=  [[fill]align][sign][\"z\"][\"#\"][\"0\"][width][grouping_option][\".\" precision][type]\nfill            ::=  \u003cany character\u003e\nalign           ::=  \"\u003c\" | \"\u003e\" | \"=\" | \"^\"\nsign            ::=  \"+\" | \"-\" | \" \"\nwidth           ::=  digit+\ngrouping_option ::=  \"_\" | \",\"\nprecision       ::=  digit+\ntype            ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"\n```\nThe precision follows the `.`, and the way that it manifests depends on the particular float or decimal `type` chosen.\nFor example, for a precision `p`, the `f` type prints `p` digits following the decimal point, so that `{:.3f}` would print 3 decimal points.\n[Python docs here](https://docs.python.org/3/library/string.html#format-specification-mini-language).\n\n# Pretty plotting\n\n[See this repo](https://github.com/garrettj403/SciencePlots)\nTo import:\n```\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.style.use('science')\nmpl.rcParams['figure.dpi'] = 300\n```\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/todo":{"title":"Todo","content":"\n# Website\n\n- [ ] Write post about easily creating documentation with Poxy using GitHub pages to deploy. \n- [ ] Increase font size\n- [ ] Figure out better organization\n- [ ] Include CV\n- [ ] Figure out Table of Contents\n- [ ] Publish Fourier Widget to GitHub\n- [ ] Write sidebar\n    - [ ] Make hamburger icon [see here for tutorial](https://w3codepen.com/howto-html-css-hamburger-menu-icon/)\n    - [ ] Write \"how to make a sidebar and toolbar post\"\n\n# New Website\n- [ ] Start writing Quartz in Zola\n\n# Professional stuff\n\n- [ ] Update CV\n- [ ] Add README's to projects on GitHub\n\n# Neovim\n\n- [ ] Write post about find and replace in vim\n- [ ] Figure out [folding](https://neovim.io/doc/user/fold.html) [for comments](https://vi.stackexchange.com/questions/3512/how-to-fold-comments)\n- [ ] Figure out [folding for content](https://github.com/anuvyklack/pretty-fold.nvim)\n- [X] Fix error with org stuff so I can continue to edit org files\n- [ ] Figure out how to paste images from clipboard\n    - [ ] Figure out how to access clipboard images in Lua\n    - [ ] Put clipboard image in folder\n    - [ ] Figure out good way to specify which folder things are pasted into (potentially based on current and an image folder)\n    - [ ] In pasting images, automatically create link which goes to that image\n- [ ] Figure out dap ([watch this](https://youtu.be/0moS8UHupGc)).\n- [ ] Figure out built-in C++ indenting so it aligns with opening parenthesis.\n    - [ ] Try not to get distracted by general formatting.\n\n# Neorg\n\n- [ ] Make it so pressing enter on links takes you to the link or opens the file with `xdg-open`.\n\n# GDB\n\n- [ ] Write page on how to use + useful shortcuts\n- [ ] Look at pretty printing\n- [ ] Look at making custom functions\n\n# Bachmann-Landau\n\n- [ ] Use [tiny-css](https://github.com/tiny-css/tiny-css) to style some components\n- [ ] Think about intuitive layout (might ask groupchat)\n- [ ] Dropdown menu (or buttons?) to plot different circles on the rhs.\n    - Could also just plot all three\n- [ ] Document the React components better\n\n# Transcriptions\n\n- [ ] Write down what you have for [Chris solo Rygar](https://youtu.be/WcZKz2sKp38).\n    - Maybe slow down with Reaper -- may be easier.\n- [ ] Start Mamma Mia\n    - [ ] Start with something easy like the bass, then interface with Stephen.\n\n# Wezterm\n\n- [X] Move tabs in config [see here](https://wezfurlong.org/wezterm/config/lua/keyassignment/MoveTab.html)\n- [ ] Rename tabs in config [see here](https://github.com/wez/wezterm/issues/522)\n- [ ] Put config on GitHub\n\n# Home server\n\n- [ ] Figure out different options for communicating over a network\n    - [ ] WebDAV\n    - [ ] VPN\n    - [ ] Zerotier\n- [ ] Consider different storage options\n    - [ ] ssh\n    - [ ] nextcloud\n    - [ ] owncloud\n\n# Sympy\n\n- [ ] Read indexed code and function code\n- [ ] Figure out how to make an indexed function object which works properly with differentiation.\n\n# Orgzly\n\n- [ ] Figure out where and how it calls the org parser\n- [ ] Figure out how to use treesitter in Android\n- [ ] See if Neorg could also be added as a config option\n\n# Lilypond\n\n- [ ] Write up what I was struggling with during guitar stuff\n\n# General projects\n\n- [ ] Look at org roam, compare to neorg\n- [ ] Learn UML, write research code in it\n- [ ] Read through sympy code generation and write small library for code generation\n- [ ] Poxy\n- [ ] Blender\n- [ ] Bevy\n- [ ] Lebedev quadrature for Rust numerical libraries\n- [ ] Knit Sweater\n- [ ] Inkscape\n- [ ] Circuits\n    - [ ] Explain how capacitors, resistors, and inductors affect an AC current (particularly a square wave, which is what an Arduino outputs). \n    - [ ] Just go through Hambley \n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]},"/notes/website":{"title":"Website","content":"\n## Darkmode responsive Mermaid diagrams\n\n[Mermaid](https://mermaid.js.org/) is a utility for generating diagrams based on plain-text, typically through Markdown.\nIt is supported by GitHub natively, and can create class diagrams, sequence diagrams, Gitgraphs, and more.\nI wanted to use the Gitgraph functionality to take better notes on how git works, but I noticed that some of the styles were unreadable depending on whether the website was in light or dark mode. \nIt took a lot of doing to make it dynamically switch depending on the colorscheme, so I'm taking notes here.\n\n### Manually rendering Mermaid\n\nFor Quartz v3, Mermaid diagrams are initialized in `layouts/partials/mermaid.html`.\nThe code is:\n```javascript\nimport mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';\nmermaid.initialize({ startOnLoad: true });\n```\nFirst I changed to the latest version, 10.4 (it has a nicer API), and then I disabled rendering on load.\nThis makes it so that where a graph would be rendered, the page just renders the text specifying the graph:\n```javascript\nimport mermaid from 'https://unpkg.com/mermaid@10.4.0/dist/mermaid.esm.min.mjs';\nmermaid.initialize({ startOnLoad: false });\n```\nThen, to actually render, one may just run `mermaid.run()`. \nI wrote a wrapper function so that it could be used in other scripts:\n```javascript\nexport function renderMermaid() {\n    return mermaid.run();\n}\n```\nIt returns the output which is a `Promise`. \nRunning this on start will render the graphs.\n\n### Changing the colorscheme automatically\n\nTo set a colorscheme, you need to include a directive.\nThis is done within the text specifying the graph as:\n```\n%%{ init: { 'theme': 'dark' } }%%\n```\nSince I want this to appear in every Mermaid block specified in my Markdown files, I go to `layouts/_default/_markup/render-codeblock-mermaid.html` so that the `div` which replaces a Mermaid codeblock turns into:\n```html\n\u003cdiv class=\"mermaid\"\u003e\n  %%{ init: { 'theme': 'dark' } }%%\n  {{- .Inner | safeHTML }}\n\u003c/div\u003e\n```\nNow, Mermaid will replace the text in this `div` with an `svg` which is the actually rendered graph.\nHence, we need to save this text somewhere.\nFor this, I create a new script in `assets/js/mermaid.js` which will hold all the Mermaid code, and then write the following function to gather all the pre-rendered text for later use, and assign the relevant `div`s an ID:\n```javascript\n// mermaid.js\n\nvar mermaid_markup = [];\nexport function getMermaidMarkup() {\n    const mermaid_elements = document.getElementsByClassName(\"mermaid\");\n    for (let i = 0; i \u003c mermaid_elements.length; ++i) {\n        mermaid_elements[i].id = `mermaid[${i}]`;  \n        mermaid_markup.push({id: mermaid_elements[i].id, \n            markup: mermaid_elements[i].textContent});\n    }\n}\n```\nAdditionally, I want to put all of my Mermaid functionality in this file, so I take it out of `mermaid.html` and paste it here:\n```javascript\n// mermaid.js\n\nimport mermaid from 'https://unpkg.com/mermaid@10.4.0/dist/mermaid.esm.min.mjs';\nmermaid.initialize({ startOnLoad: false });\n\n// ...getMermaidMarkup\n\nexport function renderMermaid() {\n    return mermaid.run();\n}\n```\nAdditionally, I change `mermaid.html` to:\n```html\n\u003c!-- mermaid.html --\u003e\n\n{{if $.Site.Data.config.enableMermaid}}\n  {{ if .Page.Store.Get \"hasMermaid\" }}\n    {{$scriptname := \"js/mermaid.js\"}}\n    {{ $s := resources.Get $scriptname | resources.ExecuteAsTemplate $scriptname . | resources.Fingerprint \"md5\" | resources.Minify }}\n    \u003cscript src=\"{{$s.Permalink}}\" type=\"module\"\u003e\u003c/script\u003e\n  {{ end }}\n{{ end }}\n```\nso that it just includes the source from `mermaid.js`.\nFinally, I write a function which takes a colorscheme name, sets the colorschemes of all of the Mermaid diagrams, and then re-renders:\n```javascript\n// mermaid.js\n\nexport function setMermaidColorscheme(currentTheme) {\n    for (let i = 0; i \u003c mermaid_markup.length; ++i) {\n        const mermaid_element = document.getElementById(mermaid_markup[i].id);\n        const content = mermaid_markup[i].markup;\n        const pattern = /(%%{ init: { 'theme': ').*(' } }%%)/;\n        const replacement = \"$1\" + currentTheme + \"$2\";\n        mermaid_element.textContent = content.replace(pattern, replacement);\n        mermaid_element.removeAttribute(\"data-processed\");\n    }\n    mermaid.run();\n}\n```\nNow we just need to tie this to the darkmode switcher. \nIn Quartz v3 this lives in `assets/js/darkmode.js`.\nTo import the `mermaid.js` functionality, I actually need to make sure that I import `darkmode.js` into the head as a module script.\nFor this I make a modification to `layouts/partials/head.html`:\n```html\n{{$scriptname := \"js/darkmode.js\"}}\n{{ $s := resources.Get $scriptname | resources.ExecuteAsTemplate $scriptname . | resources.Fingerprint \"md5\" | resources.Minify }}\n\u003cscript src=\"{{$s.Permalink}}\" type=\"module\"\u003e\u003c/script\u003e\n\n{{$scripts := (slice \"js/util.js\")}}\n{{range $scripts}}\n{{$scriptname := .}}\n{{ $s := resources.Get $scriptname | resources.ExecuteAsTemplate $scriptname . | resources.Fingerprint \"md5\" | resources.Minify }}\n\u003cscript src=\"{{$s.Permalink}}\"\u003e\u003c/script\u003e\n{{end}}\n```\n(Previously `darkmode.js` was being imported in a regular source block).\nFinally, we can import the `mermaid.js` functionality into `darkmode.js` as follows:\n```javascript\n// darkmode.js\n\n{{ $mermaid := \"js/mermaid.js\" }}\n{{ $mermaid_import := resources.Get $mermaid | resources.ExecuteAsTemplate $mermaid . | resources.Fingerprint \"md5\" | resources.Minify }}\nimport { getMermaidMarkup, renderMermaid, setMermaidColorscheme } from \"{{$mermaid_import.Permalink}}\"\n```\nWe need to do it this way because Hugo minifies and puts the files in some weird places.\nAt long last, we may call our Mermaid functions in order to tie it to darkmode switching:\n```javascript\n// darkmode.js\n\n// code here...\n\nif (currentTheme) {\n  document.documentElement.setAttribute('saved-theme', currentTheme);\n  syntaxTheme.href = currentTheme === 'dark' ?  '{{ $darkSyntax.Permalink }}' :  '{{ $lightSyntax.Permalink }}';\n  getMermaidMarkup();\n  const rendered = renderMermaid();\n  rendered.then(() =\u003e { \n      let mermaid_colorscheme;\n      if (currentTheme === 'light') {\n          mermaid_colorscheme = 'forest';\n      } else {\n          mermaid_colorscheme = 'dark';\n      }\n      setMermaidColorscheme(mermaid_colorscheme);\n  });\n}\n\nconst switchTheme = (e) =\u003e {\n  if (e.target.checked) {\n    document.documentElement.setAttribute('saved-theme', 'dark');\n    localStorage.setItem('theme', 'dark');\n    syntaxTheme.href = '{{ $darkSyntax.Permalink }}';\n    setMermaidColorscheme('dark');\n  }\n  else {\n    document.documentElement.setAttribute('saved-theme', 'light')\n    localStorage.setItem('theme', 'light')\n    syntaxTheme.href = '{{ $lightSyntax.Permalink }}';\n    setMermaidColorscheme('forest');\n  }\n}\n\n// more code here...\n```\nWith this, our Mermaid diagrams change color on lightmode/darkmode switch.\nFor lightmode it seems that `forest` is the most scrutable, and for darkmode `dark` is.\nIt should be clear from the code how to change those to different schemes, in case one is more appealing.\n","lastmodified":"2024-04-05T18:47:49.254355648Z","tags":[]}}